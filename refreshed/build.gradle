apply plugin: 'com.android.application'
apply plugin: 'realm-android'
apply plugin: 'io.fabric'

android {
    compileSdkVersion rootProject.ext.compileSdkVersion
    buildToolsVersion rootProject.ext.buildToolsVersion

    defaultConfig {
        applicationId "xyz.jienan.refreshed"
        minSdkVersion rootProject.ext.minSdkVersion
        targetSdkVersion rootProject.ext.targetSdkVersion
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

        Properties properties = new Properties()
        File keystoreProperty = project.rootProject.file("./refreshed/keystore.properties")
        if (keystoreProperty.exists())
            properties.load(keystoreProperty.newDataInputStream())
        manifestPlaceholders = [
                ADMOB_APP_ID    : System.getenv("ADMOB_APP_ID") ? System.getenv("ADMOB_APP_ID") : (properties['ADMOB_APP_ID'] ? properties['ADMOB_APP_ID'] : (project.hasProperty("ADMOB_APP_ID") ? ADMOB_APP_ID : "")),
                ADMOD_LIST_INSERT_ADS_UNIT_ID : System.getenv("ADMOD_LIST_INSERT_ADS_UNIT_ID") ? System.getenv("ADMOD_LIST_INSERT_ADS_UNIT_ID") : (properties['ADMOD_LIST_INSERT_ADS_UNIT_ID'] ? properties['ADMOD_LIST_INSERT_ADS_UNIT_ID'] : (project.hasProperty("ADMOD_LIST_INSERT_ADS_UNIT_ID") ? ADMOD_LIST_INSERT_ADS_UNIT_ID : "")),
                NEWSAPI_API_KEY : System.getenv("NEWSAPI_API_KEY") ? System.getenv("NEWSAPI_API_KEY") : (properties['NEWSAPI_API_KEY'] ? properties['NEWSAPI_API_KEY'] : (project.hasProperty("NEWSAPI_API_KEY") ? NEWSAPI_API_KEY : "")),
                ALTER_HOST_API_KEY : System.getenv("ALTER_HOST_API_KEY") ? System.getenv("ALTER_HOST_API_KEY") : (properties['ALTER_HOST_API_KEY'] ? properties['ALTER_HOST_API_KEY'] : (project.hasProperty("ALTER_HOST_API_KEY") ? ALTER_HOST_API_KEY : "")),
        ]
    }
    signingConfigs {
        releaseConfig {
            File key = file("../key.jks")
            if (key.exists()) {
                storeFile key
                Properties properties = new Properties()
                File localProperty = file('../local.properties')
                if (localProperty.exists())
                    properties.load(localProperty.newDataInputStream())
                storePassword project.hasProperty("KEYSTORE_PASS") ? KEYSTORE_PASS : (System.getenv("KEYSTORE_PASS") ? System.getenv("KEYSTORE_PASS") : properties.getProperty("KEYSTORE_PASS"))
                keyAlias project.hasProperty("ALIAS_NAME") ? ALIAS_NAME : (System.getenv("ALIAS_NAME") ? System.getenv("ALIAS_NAME") : properties.getProperty("ALIAS_NAME"))
                keyPassword project.hasProperty("ALIAS_PASS") ? ALIAS_PASS : (System.getenv("ALIAS_PASS") ? System.getenv("ALIAS_PASS") : properties.getProperty("ALIAS_PASS"))
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            zipAlignEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.releaseConfig
        }
    }

    splits {
        abi {
            enable gradle.startParameter.taskNames.contains("assembleRelease")
            reset()
            include 'armeabi-v7a', 'arm64-v8a', 'mips', 'x86', 'x86_64'
            universalApk true
        }
    }
}

// Map for the version code that gives each ABI a value.
ext.abiCodes = ['armeabi-v7a':'1', 'arm64-v8a':'2', 'mips':'3', 'x86':'4', 'x86_64':'5']

import com.android.build.OutputFile
// For each APK output variant, override version code of outputs based on ABI codes
// ex) 'mips' -> 3xxx
// ex) 'x86' -> 4xxx
android.applicationVariants.all { variant ->
    variant.outputs.each { output ->
        def baseVersionCode = project.ext.abiCodes.get(output.getFilter(OutputFile.ABI))
        if (baseVersionCode != null) {
            output.versionCodeOverride = Integer.valueOf(baseVersionCode + variant.versionCode)
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    implementation 'com.android.support:appcompat-v7:' + rootProject.supportLibVersion
    implementation 'com.android.support:design:' + rootProject.supportLibVersion
    implementation 'com.android.support:recyclerview-v7:' + rootProject.supportLibVersion
    implementation 'com.android.support:cardview-v7:' + rootProject.supportLibVersion
    implementation 'com.android.support:customtabs:' + rootProject.supportLibVersion
    implementation 'com.github.bumptech.glide:glide:4.5.0'
    testCompile 'junit:junit:4.12'
    implementation 'com.google.code.gson:gson:2.8.2'
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.squareup.retrofit2:adapter-rxjava2:2.3.0'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.9.1'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.8'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.1'
    implementation 'com.github.gturedi:stateful-layout:1.2.1'
    implementation 'com.google.firebase:firebase-core:' + rootProject.googleLibVersion
    implementation 'com.google.firebase:firebase-ads:' + rootProject.googleLibVersion
    implementation 'com.google.android.gms:play-services-vision:' + rootProject.googleLibVersion
    implementation('com.crashlytics.sdk.android:crashlytics:2.7.1@aar') {
        transitive = true
    }
}

apply plugin: 'com.google.gms.google-services'